// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLb returns the embedded CollectionSpec for lb.
func loadLb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_LbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load lb: %w", err)
	}

	return spec, err
}

// loadLbObjects loads lb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*lbObjects
//	*lbPrograms
//	*lbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// lbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lbSpecs struct {
	lbProgramSpecs
	lbMapSpecs
}

// lbSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lbProgramSpecs struct {
	SimpleLb       *ebpf.ProgramSpec `ebpf:"simple_lb"`
	SimpleLbEgress *ebpf.ProgramSpec `ebpf:"simple_lb_egress"`
}

// lbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type lbMapSpecs struct {
	CtMap   *ebpf.MapSpec `ebpf:"ct_map"`
	DnatMap *ebpf.MapSpec `ebpf:"dnat_map"`
}

// lbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLbObjects or ebpf.CollectionSpec.LoadAndAssign.
type lbObjects struct {
	lbPrograms
	lbMaps
}

func (o *lbObjects) Close() error {
	return _LbClose(
		&o.lbPrograms,
		&o.lbMaps,
	)
}

// lbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLbObjects or ebpf.CollectionSpec.LoadAndAssign.
type lbMaps struct {
	CtMap   *ebpf.Map `ebpf:"ct_map"`
	DnatMap *ebpf.Map `ebpf:"dnat_map"`
}

func (m *lbMaps) Close() error {
	return _LbClose(
		m.CtMap,
		m.DnatMap,
	)
}

// lbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLbObjects or ebpf.CollectionSpec.LoadAndAssign.
type lbPrograms struct {
	SimpleLb       *ebpf.Program `ebpf:"simple_lb"`
	SimpleLbEgress *ebpf.Program `ebpf:"simple_lb_egress"`
}

func (p *lbPrograms) Close() error {
	return _LbClose(
		p.SimpleLb,
		p.SimpleLbEgress,
	)
}

func _LbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed lb_bpfel.o
var _LbBytes []byte
